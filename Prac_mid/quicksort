#include <iostream>
#include <algorithm>
using namespace std;
int medianofthree(int a[], int l, int r)
{
    int mid = (l + r) / 2;
    if (a[l] > a[mid])
    {
        swap(a[l], a[mid]);
    }
    if (a[l] > a[r])
    {
        swap(a[l], a[r]);
    }
    if (a[mid] > a[r])
    {
        swap(a[mid], a[r]);
    }
    swap(a[mid], a[r]);
    return a[r];
}
int partition(int a[], int l, int r)
{
    int pivot = medianofthree(a, l, r);

    int i = l, j = r - 1;
    while (1)
    {
        while (i <= j && a[i] < pivot)
            i++;
        while (i <= j && a[j] > pivot)
            j--;
        if (i >= j)
        {
            break;
        }
        swap(a[i], a[j]);
    }
    swap(a[i], a[r]);
    return i;
}
void quicksort(int a[], int l, int r)
{

    if (l < r)
    {
        int p = partition(a, l, r);
        quicksort(a, l, p - 1);
        quicksort(a, p + 1, r);
    }
}

int main()
{
    int n;
    cin >> n;
    int arry[n];
    for (int i = 0; i < n; i++)
    {
        cin >> arry[i];
    }
    quicksort(arry, 0, n - 1);
    for (int i = 0; i < n; i++)
    {
        cout << arry[i] << " ";
    }
    return 0;
}
