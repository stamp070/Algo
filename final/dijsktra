#include<bits/stdc++.h>
using namespace std;
#define inf 50000
void dijkstra(vector<pair<int,int> > g[],int V,int src,int dest){
	priority_queue<pair<int,int> ,vector<pair<int,int> >,greater<pair<int,int> > > pq;
	
	vector<int> dist(V,inf);
	vector<int> parent(V,-1);
	vector<bool> inTree(V,false);
	
	pq.push({0,src});
	dist[src] = 0;

	while(!pq.empty()){
		int u = pq.top().second;
		
		inTree[u] = true;
		
		cout <<  u << " | ";
		pq.pop();
		
		for(int j=0;j<g[u].size();j++){
			int v = g[u][j].first;
			int weight = g[u][j].second;
			if(inTree[v] == false && dist[u]+weight<dist[v]){
				
				dist[v] = dist[u]+weight;
				
				pq.push({dist[v],v});
				
				parent[v]=u;
				
			}
		}
	}
}
int main(){
	int n=5; // edges
	
	vector<pair<int,int> > g[n];
//	for(int i=0;i<n;i++){
//		int a,b;
//		cin >> a >> b;
//		g[i].push_back({a,b});
//		g[a].push_back({i,b});
//	}
	g[0].push_back({1,5});
	g[0].push_back({3,9});
	g[0].push_back({4,1});
	
	g[1].push_back({0,5});
	g[1].push_back({2,2});
	
	g[2].push_back({0,9});
	g[2].push_back({3,6});
	
	g[3].push_back({0,1});
	g[3].push_back({2,6});
	g[3].push_back({4,2});
	
	g[4].push_back({0,1});
	g[4].push_back({3,2});
	dijkstra(g,n,0,2);
	return 0;
}
